(self.webpackChunk_kresli_react_diagrams_docs=self.webpackChunk_kresli_react_diagrams_docs||[]).push([[974],{7879:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>g,frontMatter:()=>p,metadata:()=>x,toc:()=>k});var o=t(7560),i=t(8283),a=t(2784),r=t(876),c=t(323),s={dragLink:null,registeredElements:new Map,canvasRef:null,viewRef:null,nodes:[{id:"1",position:[100,100],outputs:[{id:"1"}]},{id:"3",position:[400,400],inputs:[{id:"3"}]}],links:[{input:"1",output:"3"}],position:[0,0],scale:1},u=function(e){var n=e.element,t=e.worldX,o=e.worldY,i=(0,c.BH)();switch(console.log(n),n.type){case c.Hd.CANVAS:return a.createElement("button",{onClick:function(){return i({type:c.g6.ADD_NODE,node:{position:[t,o],inputs:[{id:"in"+performance.now()}],outputs:[{id:"out"+performance.now()}]}})}},"create");case c.Hd.NODE:return a.createElement("button",{onClick:function(){return i({type:c.g6.REMOVE_NODE,node:n.node})}},"remove node");case c.Hd.PORT:return a.createElement("div",null,"port");case c.Hd.LINK:return a.createElement("div",null,"link")}return null};const d=function(){var e=(0,c.I_)(s);return a.createElement("div",{style:{width:"100%",height:500}},a.createElement(c.S0,{schema:e,contextMenu:u}))};var l=t(7110),m=["components"],p={},x={unversionedId:"context_menu/Context Menu",id:"context_menu/Context Menu",isDocsHomePage:!1,title:"Context Menu",description:"Quick Example",source:"@site/docs/context_menu/Context Menu.mdx",sourceDirName:"context_menu",slug:"/context_menu/Context Menu",permalink:"/react-diagrams/context_menu/Context Menu",editUrl:"https://github.com/kresli/react-diagrams/edit/master/website/docs/context_menu/Context Menu.mdx",version:"current",frontMatter:{},sidebar:"ReactDiagrams",previous:{title:"Node Data",permalink:"/react-diagrams/node_data/Node Data"},next:{title:"Custom Nodes",permalink:"/react-diagrams/custom_nodes/Custom Nodes"}},k=[{value:"Quick Example",id:"quick-example",children:[]}],E={toc:k};function g(e){var n=e.components,t=(0,i.Z)(e,m);return(0,r.kt)("wrapper",(0,o.Z)({},E,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"quick-example"},"Quick Example"),(0,r.kt)(l.Z,{className:"language-tsx",mdxType:"CodeBlock"},'import React from "react";\nimport {\n  Diagram,\n  DiagramContextMenu,\n  ElementType,\n  Schema,\n  useSchema,\n  useAction,\n  SchemaActionType,\n} from "@kresli/react-diagrams";\n\nconst initData: Schema = {\n  dragLink: null,\n  registeredElements: new Map(),\n  canvasRef: null,\n  viewRef: null,\n  nodes: [\n    {\n      id: "1",\n      position: [100, 100],\n      outputs: [{ id: "1" }],\n    },\n    {\n      id: "3",\n      position: [400, 400],\n      inputs: [{ id: "3" }],\n    },\n  ],\n  links: [\n    {\n      input: "1",\n      output: "3",\n    },\n  ],\n  position: [0, 0],\n  scale: 1,\n};\n\nconst ContextMenu: DiagramContextMenu = ({ element, worldX, worldY }) => {\n  const actions = useAction();\n  console.log(element);\n  switch (element.type) {\n    case ElementType.CANVAS:\n      const onAdd = () =>\n        actions({\n          type: SchemaActionType.ADD_NODE,\n          node: {\n            position: [worldX, worldY],\n            inputs: [{ id: `in${performance.now()}` }],\n            outputs: [{ id: `out${performance.now()}` }],\n          },\n        });\n      return <button onClick={onAdd}>create</button>;\n    case ElementType.NODE: {\n      const onRemoveNode = () =>\n        actions({\n          type: SchemaActionType.REMOVE_NODE,\n          node: element.node,\n        });\n      return <button onClick={onRemoveNode}>remove node</button>;\n    }\n    case ElementType.PORT:\n      return <div>port</div>;\n    case ElementType.LINK:\n      return <div>link</div>;\n  }\n  return null;\n};\n\nconst Example = () => {\n  const schema = useSchema(initData);\n  return (\n    <div style={{ width: "100%", height: 500 }}>\n      <Diagram schema={schema} contextMenu={ContextMenu} />\n    </div>\n  );\n};\n\nexport default Example;\n'),(0,r.kt)(d,{mdxType:"QuickExample"}))}g.isMDXComponent=!0}}]);