(self.webpackChunk_kresli_react_diagrams_docs=self.webpackChunk_kresli_react_diagrams_docs||[]).push([[271],{5286:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>f,frontMatter:()=>p,metadata:()=>g,toc:()=>h});var o=t(7560),s=t(8283),i=t(2784),r=t(876),a=t(323),u=(0,i.memo)((function(e){var n=e.outputs,t=(0,i.useMemo)((function(){return{background:"white",borderRadius:"100%",width:100,height:100,justifyContent:"center",alignItems:"center",display:"flex"}}),[]),o=(0,i.useMemo)((function(){return{width:20,height:20,background:"red",left:110,position:"absolute",justifyContent:"center",alignItems:"center",display:"flex"}}),[]);return i.createElement("div",{style:t},i.createElement("div",null,"Custom Node"),i.createElement("div",null,null==n?void 0:n.map((function(e){return i.createElement(a.GR,{key:e.id,port:e,style:o},i.createElement(a.Cc,{port:e}))}))))})),d={dragLink:null,registeredElements:new Map,canvasRef:null,viewRef:null,nodes:[{id:"1",position:[100,100],outputs:[{id:"1"}],render:u},{id:"3",position:[400,400],inputs:[{id:"3"}]}],links:[{input:"1",output:"3"}],position:[0,0],scale:1};const m=function(){var e=(0,a.I_)(d);return i.createElement("div",{style:{width:"100%",height:500}},i.createElement(a.S0,{schema:e}))};var c=t(7110),l=["components"],p={},g={unversionedId:"custom_nodes/Custom Nodes",id:"custom_nodes/Custom Nodes",isDocsHomePage:!1,title:"Custom Nodes",description:"Quick Example",source:"@site/docs/custom_nodes/Custom Nodes.mdx",sourceDirName:"custom_nodes",slug:"/custom_nodes/Custom Nodes",permalink:"/react-diagrams/custom_nodes/Custom Nodes",editUrl:"https://github.com/kresli/react-diagrams/edit/master/website/docs/custom_nodes/Custom Nodes.mdx",version:"current",frontMatter:{},sidebar:"ReactDiagrams",previous:{title:"Context Menu",permalink:"/react-diagrams/context_menu/Context Menu"},next:{title:"Custom Links",permalink:"/react-diagrams/custom_links/Custom Links"}},h=[{value:"Quick Example",id:"quick-example",children:[]}],k={toc:h};function f(e){var n=e.components,t=(0,s.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"quick-example"},"Quick Example"),(0,r.kt)(c.Z,{className:"language-tsx",mdxType:"CodeBlock"},'import React, { memo, useMemo } from "react";\nimport { CSSProperties } from "styled-components";\nimport {\n  Diagram,\n  DiagramNodeRender,\n  Gate,\n  Port,\n  Schema,\n  useSchema,\n} from "@kresli/react-diagrams";\n\nconst CustomNode: DiagramNodeRender = memo(({ outputs }) => {\n  const nodeStyle: CSSProperties = useMemo(\n    () => ({\n      background: "white",\n      borderRadius: "100%",\n      width: 100,\n      height: 100,\n      justifyContent: "center",\n      alignItems: "center",\n      display: "flex",\n    }),\n    []\n  );\n  const portStyle: CSSProperties = useMemo(\n    () => ({\n      width: 20,\n      height: 20,\n      background: "red",\n      left: 110,\n      position: "absolute",\n      justifyContent: "center",\n      alignItems: "center",\n      display: "flex",\n    }),\n    []\n  );\n  return (\n    <div style={nodeStyle}>\n      <div>Custom Node</div>\n      <div>\n        {outputs?.map((output) => (\n          <Port key={output.id} port={output} style={portStyle}>\n            <Gate port={output} />\n          </Port>\n        ))}\n      </div>\n    </div>\n  );\n});\n\nconst initData: Schema = {\n  dragLink: null,\n  registeredElements: new Map(),\n  canvasRef: null,\n  viewRef: null,\n  nodes: [\n    {\n      id: "1",\n      position: [100, 100],\n      outputs: [{ id: "1" }],\n      render: CustomNode,\n    },\n    {\n      id: "3",\n      position: [400, 400],\n      inputs: [{ id: "3" }],\n    },\n  ],\n  links: [\n    {\n      input: "1",\n      output: "3",\n    },\n  ],\n  position: [0, 0],\n  scale: 1,\n};\n\nconst Example = () => {\n  const schema = useSchema(initData);\n  return (\n    <div style={{ width: "100%", height: 500 }}>\n      <Diagram schema={schema} />\n    </div>\n  );\n};\n\nexport default Example;\n'),(0,r.kt)(m,{mdxType:"QuickExample"}))}f.isMDXComponent=!0}}]);